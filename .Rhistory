method = "spearman",
exact = FALSE
)
})
tmp[["approx_rho"]] <- lapply(cor_tests, function(ct) ct$estimate)
tmp[["p.value"]] <- lapply(cor_tests, function(ct) ct$p.value)
},
l_tt,
r_tt
)
cor_res[[1]]
cor_res <- mapply(
function(l, r) {
tmp <- data.frame(Contrast = colnames(contr))
cor_tests <- lapply(colnames(contr), function(ctr){
cor.test(
filter(l, Contrast == ctr)$logFC,
filter(r, Contrast == ctr)$logFC,
method = "spearman",
exact = FALSE
)
})
tmp[["approx_rho"]] <- lapply(cor_tests, function(ct) ct$estimate)
tmp[["p.value"]] <- lapply(cor_tests, function(ct) ct$p.value)
return(tmp)
},
l_tt,
r_tt
)
cor_res[[1]]
cor_res
l <- l_tt[[1]]
r <- r_tt[[1]]
tmp <- data.frame(Contrast = colnames(contr))
cor_tests <- lapply(colnames(contr), function(ctr){
cor.test(
filter(l, Contrast == ctr)$logFC,
filter(r, Contrast == ctr)$logFC,
method = "spearman",
exact = FALSE
)
})
tmp[["approx_rho"]] <- lapply(cor_tests, function(ct) ct$estimate)
tmp[["p.value"]] <- lapply(cor_tests, function(ct) ct$p.value)
tmp
?mapply
cor_res <- mapply(
function(l, r) {
tmp <- data.frame(Contrast = colnames(contr))
cor_tests <- lapply(colnames(contr), function(ctr){
cor.test(
filter(l, Contrast == ctr)$logFC,
filter(r, Contrast == ctr)$logFC,
method = "spearman",
exact = FALSE
)
})
tmp[["approx_rho"]] <- lapply(cor_tests, function(ct) ct$estimate)
tmp[["p.value"]] <- lapply(cor_tests, function(ct) ct$p.value)
return(tmp)
},
l_tt,
r_tt,
simplify = FALSE
)
cor_res <- mapply(
function(l, r) {
tmp <- data.frame(Contrast = colnames(contr))
cor_tests <- lapply(colnames(contr), function(ctr){
cor.test(
filter(l, Contrast == ctr)$logFC,
filter(r, Contrast == ctr)$logFC,
method = "spearman",
exact = FALSE
)
})
tmp[["approx_rho"]] <- lapply(cor_tests, function(ct) ct$estimate)
tmp[["p.value"]] <- lapply(cor_tests, function(ct) ct$p.value)
return(tmp)
},
l_tt,
r_tt,
simplify = FALSE
)
cor_res <- mapply(
function(l, r) {
tmp <- data.frame(Contrast = colnames(contr))
cor_tests <- lapply(colnames(contr), function(ctr){
cor.test(
filter(l, Contrast == ctr)$logFC,
filter(r, Contrast == ctr)$logFC,
method = "spearman",
exact = FALSE
)
})
tmp[["approx_rho"]] <- lapply(cor_tests, function(ct) ct$estimate)
tmp[["p.value"]] <- lapply(cor_tests, function(ct) ct$p.value)
return(tmp)
},
l_tt,
r_tt,
SIMPLIFY = FALSE
)
cor_res
cor_res <- bind_rows(mapply(
function(l, r) {
tmp <- data.frame(Contrast = colnames(contr))
cor_tests <- lapply(colnames(contr), function(ctr){
cor.test(
filter(l, Contrast == ctr)$logFC,
filter(r, Contrast == ctr)$logFC,
method = "spearman",
exact = FALSE
)
})
tmp[["approx_rho"]] <- lapply(cor_tests, function(ct) ct$estimate)
tmp[["p.value"]] <- lapply(cor_tests, function(ct) ct$p.value)
return(tmp)
},
l_tt,
r_tt,
SIMPLIFY = FALSE
))
cor_res
library(tidyverse)
library(limma)
metadata <- read_tsv("../data/metadata.tsv") %>%
mutate(Period = as.factor(Period))
mm <- model.matrix(
~ Period + Regioncode + Sex + Ethnicity + Site,
data = metadata
)
contr <- makeContrasts(
"P02P03" = Period3,
"P03P04" = Period4 - Period3,
"P04P05" = Period5 - Period4,
"P05P06" = Period6 - Period5,
"P06P07" = Period7 - Period6,
"P07P08" = Period8 - Period7,
"P08P09" = Period9 - Period8,
"P09P10" = Period10 - Period9,
"P10P11" = Period11 - Period10,
"P11P12" = Period12 - Period11,
"P12P13" = Period13 - Period12,
levels = colnames(mm)
)
l_bayes <- list.files(
"../data/sva_simulations",
pattern = "l_",
full.names = TRUE
)[1:10] %>%
setNames(., seq(1:length(.))) %>%
lapply(., readRDS)
r_bayes <- list.files(
"../data/sva_simulations",
pattern = "r_",
full.names = TRUE
)[1:10] %>%
setNames(., seq(1:length(.))) %>%
lapply(., readRDS)
i <- 3
library(tidyverse)
library(edgeR)
library(limma)
metadata <- read_tsv("../data/metadata.tsv") %>%
mutate(Period = as.factor(Period))
# sva_results <- readRDS(paste0("../data/sva_results/", i, ".rds"))
lm_fit <- readRDS(paste0("../data/limma_intermediates/lm_fit_", i, ".rds"))
mm <- model.matrix(
~ Period + Regioncode + Sex + Ethnicity + Site,
data = metadata[match(colnames(iso_cts), metadata$Sample), ] %>%
mutate(Period = as.factor(Period))
)
mm <- model.matrix(
~ Period + Regioncode + Sex + Ethnicity + Site,
data = metadata
)
cont_mat <- makeContrasts(
P02P03 = Period3,
P03P04 = Period4 - Period3,
P04P05 = Period5 - Period4,
P05P06 = Period6 - Period5,
P06P07 = Period7 - Period6,
P07P08 = Period8 - Period7,
P08P09 = Period9 - Period8,
P09P10 = Period10 - Period9,
P10P11 = Period11 - Period10,
P11P12 = Period12 - Period11,
P12P13 = Period13 - Period12,
levels = colnames(mm)
)
ctr_fit <- contrasts.fit(lm_fit, cont_mat)
dim(cont_mat)
dim(metadata)
cont_mat
lm_fit$coefficients
lm_fit$coefficients %>% dim()
dim(cont_mat)
sva_results <- readRDS(paste0("../data/sva_results/", i, ".rds"))
# rownames(mm) <- metadata$Sample
# all(rownames(mm) == rownames(sva_results$sv))
colnames(sva_results$sv) <- paste0("SV", seq(1, ncol(sva_results$sv)))
mm <- cbind(mm, sva_results$sv)
cont_mat <- makeContrasts(
P02P03 = Period3,
P03P04 = Period4 - Period3,
P04P05 = Period5 - Period4,
P05P06 = Period6 - Period5,
P06P07 = Period7 - Period6,
P07P08 = Period8 - Period7,
P08P09 = Period9 - Period8,
P09P10 = Period10 - Period9,
P10P11 = Period11 - Period10,
P11P12 = Period12 - Period11,
P12P13 = Period13 - Period12,
levels = colnames(mm)
)
ctr_fit <- contrasts.fit(lm_fit, cont_mat)
ebayes <- eBayes(ctr_fit)
cont_mat
colnames(cont_mat)
ebayes$coefficients
tt_vec <- lapply(
colnames(cont_mat),
function(coef) {
topTable(ebayes, coef = coef, number = Inf) %>%
mutate(ensembl_transcript_id = rownames(.))
}
) %>% setNames(., colnames(cont_mat))
tt_vec[[1]]
tt_vec <- lapply(
colnames(cont_mat),
function(coef) {
topTable(ebayes, coef = coef, number = Inf) %>%
mutate(
ensembl_transcript_id = rownames(.),
Contrast = coef
)
}
) %>% setNames(., colnames(cont_mat))
tt_vec <- lapply(
colnames(cont_mat),
function(coef) {
topTable(ebayes, coef = coef, number = Inf) %>%
mutate(
ensembl_transcript_id = rownames(.),
Contrast = coef
)
}
) %>% setNames(., colnames(cont_mat)) %>%
bind_rows()
source('~/Remote/Switch_Isoforms_ReFiltered/scripts/Extract_DE_array.R', echo=TRUE)
tt <- lapply(
colnames(cont_mat),
function(coef) {
topTable(ebayes, coef = coef, number = Inf) %>%
mutate(
ensembl_transcript_id = rownames(.),
Contrast = coef
)
}
) %>% setNames(., colnames(cont_mat)) %>%
bind_rows()
tt
head9tt
head(tt)
i <- 3
saveRDS(tt, paste0("../data/limma_intermediates/tt_SV", i, ".rds"))
tt %>%
filter(abs(logFC) >= log2(1.5) & adj.P.Val <= 0.05) %>%
count(Contrast)
p <- ggplot(tt, aes(x = P.Value)) + facet_wrap(~ Period) + geom_histogram() + ggtitle("Pvalue Distribution per Contrast")
p
p <- ggplot(tt, aes(x = P.Value)) + facet_wrap(~ Contrast) + geom_histogram() + ggtitle("Pvalue Distribution per Contrast")
p
library(tidyverse)
library(limma)
metadata <- read_tsv("../data/metadata.tsv") %>%
mutate(Period = as.factor(Period))
mm <- model.matrix(
~ Period + Regioncode + Sex + Ethnicity + Site,
data = metadata
)
contr <- makeContrasts(
"P02P03" = Period3,
"P03P04" = Period4 - Period3,
"P04P05" = Period5 - Period4,
"P05P06" = Period6 - Period5,
"P06P07" = Period7 - Period6,
"P07P08" = Period8 - Period7,
"P08P09" = Period9 - Period8,
"P09P10" = Period10 - Period9,
"P10P11" = Period11 - Period10,
"P11P12" = Period12 - Period11,
"P12P13" = Period13 - Period12,
levels = colnames(mm)
)
cor_results <- expand.grid(
list(
Contrast = colnames(contr),
Iteration = 1:length(l_results)
)
)
cor_results <- expand.grid(
list(
Contrast = colnames(contr),
# Iteration = 1:length(l_results)
Iteration = 1:20
)
)
cor_results
source('~/Remote/Switch_Isoforms_ReFiltered/scripts/compile_sva_simulations.R')
library(tidyverse)
library(edgeR)
library(GGally)
source("src/transform_data.R")
i <- 1
iso_cts <- readRDS("../data/iso_cts_filter.rds")
metadata <- read_tsv("../data/metadata.tsv")
sv <- readRDS(paste0("../data/sva_results/", i, ".rds"))
tt <- readRDS(paste0("../data/limma_intermediates/tt_SV", i, ".rds"))
metadata <- read_tsv("../data/metadata.tsv") %>%
mutate(Period = as.factor(Period))
mm <- model.matrix(
~ Period + Regioncode + Sex + Ethnicity + Site,
data = metadata
)
rownames(mm) <- metadata$Sample
transformed_cts <- transform_data(
cpm(calcNormFactors(DGEList(iso_cts), method = "TMM")),
mm,
sv$sv
)
prc <- prcomp(t(transformed_cts), scale = TRUE, center = TRUE)
pca <- cbind(prc$x, metadata) %>%
mutate(
PrePost = ifelse(Period <= 7, "Prenatal", "Postnatal")
)
pca_legend <- GGally::grab_legend(
ggplot(data = pca, aes(x = PC1, y = PC2, color = as.factor(Period), shape = PrePost)) +
geom_point(size = 5) +
guides(
color = guide_legend(title = "(Starting) Period"),
shape = guide_legend(title = "")
) +
theme_bw() +
theme(
legend.title = element_text(size = 18),
legend.text = element_text(size = 14),
legend.box = "vertical",
legend.position = "bottom"
)
)
metadata <- read_tsv("../data/metadata.tsv")
prc <- prcomp(t(transformed_cts), scale = TRUE, center = TRUE)
pca <- cbind(prc$x, metadata) %>%
mutate(
PrePost = ifelse(Period <= 7, "Prenatal", "Postnatal")
)
pca_legend <- GGally::grab_legend(
ggplot(data = pca, aes(x = PC1, y = PC2, color = as.factor(Period), shape = PrePost)) +
geom_point(size = 5) +
guides(
color = guide_legend(title = "(Starting) Period"),
shape = guide_legend(title = "")
) +
theme_bw() +
theme(
legend.title = element_text(size = 18),
legend.text = element_text(size = 14),
legend.box = "vertical",
legend.position = "bottom"
)
)
pca_annotation_fn <- function(data, mapping, ...) {
return(
ggplot(
data = data,
mapping = mapping
) +
annotation_custom(
grid::textGrob(
paste0(
rlang::quo_text(mapping$x), " (",
round(summary(prc)$importance[2, rlang::quo_text(mapping$x)] * 100, digits = 2),
"%)"
)
),
xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf
)
)
}
gg_pairs <- ggpairs(
data = pca,
columns = c("PC1", "PC2", "PC3"),
aes(shape = PrePost, colour = as.factor(Period)),
legend = pca_legend,
diag = list(continuous = pca_annotation_fn),
upper = list(continuous = wrap("points", size = 1.5)),
lower = list(continuous = "blank"),
showStrips = FALSE
) +
labs(title = paste0("SV", i)) +
theme_bw()
gg_pairs
gg_mat <- ggmatrix(
plots = list(
gg_pairs[1, 1],
gg_pairs[1, 2],
gg_pairs[1, 3],
pca_legend,
gg_pairs[2, 2],
gg_pairs[2, 3],
ggplot(
data = tt,
aes(x = P.Value, fill = Contrast)
) +
facet_wrap(~ Contrast, strip.position = "top") +
geom_histogram() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
plot.margin = margin(t = 3, b = 3, unit = "lines"),
strip.text = element_blank(),
strip.background = element_blank()
),
ggplot(
data = tt,
aes(sample = P.Value, colour = Period)
) +
stat_qq(distribution = qunif, size = 0.5) +
stat_qq_line(distribution = qunif, colour = "black") +
facet_wrap(~ Contrast) +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
plot.margin = margin(t = 3, b = 3, unit = "lines"),
strip.text = element_blank(),
strip.background = element_blank()
),
gg_pairs[3, 3]
), nrow = 3, ncol = 3, title = paste0("SV", i)
)
gg_mat
gg_mat <- ggmatrix(
plots = list(
gg_pairs[1, 1],
gg_pairs[1, 2],
gg_pairs[1, 3],
pca_legend,
gg_pairs[2, 2],
gg_pairs[2, 3],
ggplot(
data = tt,
aes(x = P.Value, fill = Contrast)
) +
facet_wrap(~ Contrast, strip.position = "top") +
geom_histogram() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
plot.margin = margin(t = 3, b = 3, unit = "lines"),
strip.text = element_blank(),
strip.background = element_blank()
),
ggplot(
data = tt,
aes(sample = P.Value, colour = Contrast)
) +
stat_qq(distribution = qunif, size = 0.5) +
stat_qq_line(distribution = qunif, colour = "black") +
facet_wrap(~ Contrast) +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
plot.margin = margin(t = 3, b = 3, unit = "lines"),
strip.text = element_blank(),
strip.background = element_blank()
),
gg_pairs[3, 3]
), nrow = 3, ncol = 3, title = paste0("SV", i)
)
gg_mat
?ggsave
library(tidyverse)
cor_fn <- list.files(
"results",
pattern = ".tsv",
full.names = TRUE
)
cor_res <- bind_rows(lapply(cor_fn, read_tsv, col_type = cols()))
head(cor_res)
ggplot(
data = cor_res,
aes(x = SV, y = Est_rho, colour  = Contrast)
) +
geom_point(alpha = 0.2) +
geom_line(stat = "smooth", method = "loess", aes(colour = Contrast, group = Contrast))
setwd("~/Work/gee_vis")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
